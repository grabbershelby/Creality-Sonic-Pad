#===========================================================================
#========================= Start Print & End Print =========================
#===========================================================================

[gcode_macro PRINT_START]
gcode:
	{% set BED_TEMP = params.BED|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(220)|float %}	

		G90 ; use absolute coordinates
		M83 ; extruder relative mode
		
  ; Clear Bed Mesh and Home X/Y/Z
    BED_MESH_CLEAR
    G28

	; Park Toolhead, starts Heating Bed/Extruder
		G1 X0 Y0 Z5 F8000
		M104 S{EXTRUDER_TEMP}
    M190 S{BED_TEMP}

		; Wait for Extruder and Bed Temp to have reached their set Values
		M190 S{BED_TEMP}
		M109 S{EXTRUDER_TEMP}

		; With the Nozzle at Temperature and any Filament Remains stuck to it soft perform second G28 for the Z-Axis.
		G28 Z

		; Go outside Print Area <- Start of actual Purge / Prime Line.
		G1 Y0.4 F8000.0
		G1 Z0.4 F8000.0
    
		; Purge Line
		G1 X55.0 E20.0 F1073.0
		G1 X5.0 E13.0 F1800.0
		G1 X55.0 E8.0 F2000.0
		G1 Z1 F1000.0
		G92 E0 ;Reset Extruder
		M82
		
[gcode_macro END_PRINT]
gcode:
		TURN_OFF_HEATERS
	{% if "xyz" in printer.toolhead.homed_axes %}
		G91
		G1 Z4.5 F300
		G90
	{% else %}
		{action_respond_info("Printer not homed")}
	{% endif %}
		G28 X Y
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
		G1 Y{y_park} F2000
		M84 X Y E
    
#===========================================================================
#============================ Input Shaper Macros ==============================
#===========================================================================
[gcode_macro ADXL_X]
description: test resonances in x direction / of the hotend
gcode:
  M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
  home_check		#or g28 if you dont have a macro to check if you orinter is homed
  SHAPER_CALIBRATE AXIS=x
  M118 Test done
  SAVE_CONFIG
 
[gcode_macro ADXL_Y]
description: test resonances in y direction / of the heated bed
gcode:
  M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
  home_check  		#or g28
  SHAPER_CALIBRATE AXIS=y
  M118 Test done
  SAVE_CONFIG
 
#===========================================================================
#============================ Optional Macros ==============================
#===========================================================================
  
[gcode_macro UNLOAD_FILAMENT]
description: Unloads Filament from extruder
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=UNLOAD_state
    {% set Z = params.Z|default(50)|int %}
    {% set axis_max = printer.toolhead.axis_maximum %}
    {% set pos = printer.toolhead.position %}
 
    {% set z_diff = axis_max.z - pos.z %}
    {% set z_safe_lift = [ Z, z_diff ] | min%}
 
    G91                   # relative positioning
    G0 Z{ z_safe_lift }
    # Reset extruder position
    G92 E0
    G1 E5.0 F300        # extrude a little
    G1 E-30 F{ 10 * 60 } # perform the unload
    G1 E-50 F{ 5 * 60 }   # finish the unload
    RESTORE_GCODE_STATE NAME=UNLOAD_state
  {% endif %}
 
[gcode_macro PURGE]
description: Extrudes filament, used to clean out previous filament
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
  {% set PURGE_AMOUNT = params.PURGE_AMOUNT|default(40)|float %}
    SAVE_GCODE_STATE NAME=PURGE_state
    G91                   # relative coords
    G1 E{PURGE_AMOUNT} F{ 5 * 60 }  # purge
    RESTORE_GCODE_STATE NAME=PURGE_state
  {% endif %}
 
[gcode_macro LOAD_FILAMENT]
description: Loads filament into the extruder
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=LOAD_state
    G91                   # Relative coords
    G1 E50 F{ 5 * 60 }  # extrude
    G4 P{ 0.9 * 1000 }    # dwell (ms)
    G1 E25.0 F{ 5 * 60 }  # extrude a little more
    _ENABLE_FS
    RESTORE_GCODE_STATE NAME=LOAD_state
  {% endif %}

[gcode_macro M600]
description: Starts process of Filament Change
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    PAUSE_MACRO
    _DISABLE_FS
    UNLOAD_FILAMENT
  {% endif %}

[gcode_macro PAUSE_MACRO]
description: Pauses Print
gcode:
    PAUSE
    SET_IDLE_TIMEOUT TIMEOUT={ 30 * 60 }
   
[gcode_macro home_check]
description: Checks if the printer is homed, it not it homes the printer
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  
[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(220)|float %} 
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG
 
[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(60)|float %} 
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG
  
[gcode_macro BED_MESH]
description: Heats bed, makes a mesh and saves it
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %} 
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  HOME_CHECK
  M190 S{BED_TEMP}
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE
  TURN_OFF_HEATERS
  SAVE_CONFIG
 
[gcode_macro M600]
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {% set variables = printer["gcode_macro _USER_VARIABLES"] %}}
    SET_IDLE_TIMEOUT TIMEOUT=7200 ; Increase idle timeout
    {% if printer.idle_timeout.state == "Printing" %}
        PAUSE ; Pause printing
    {% endif %}
    _FILAMENT_PARK
    M107 ;turns off part cooling fan
    {% if variables.audio_enabled == True %}
       _ALERT_BEEP_ON
    {% endif %}
    # Check if this is slicer-initiated
    {% if m600cfg.cold_start == False and m600cfg.runout == False %}
        SET_IDLE_TIMEOUT TIMEOUT=3600
        {action_respond_info("Filament Change")}
    {% endif %}
   
    # Reset check variable
    SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=runout VALUE=False

[gcode_macro _m600cfg]
variable_coldstart: 0
variable_runout: False
variable_prev_temp: 0
gcode:  #Do not delete


[gcode_macro CHANGE_FILAMENT]
description: Change the filament in toolhead
gcode:
    {% set variables = printer["gcode_macro _USER_VARIABLES"] %}
    _CG28
    SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=coldstart VALUE=True
    {action_respond_info("Filament Change")}
    M600
    UNLOAD_FILAMENT
    {% if variables.auto_sensor_off == True %}
        _ENABLE_FS
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {% set variables = printer["gcode_macro _USER_VARIABLES"] %}
    {% set LENGTH = params.LENGTH|default(variables.unload_length)|float %} ; Unload length
    {% set TARGET = params.TARGET|default(variables.print_default_extruder_temp)|float %} ; Unload temperature
    ##################
    {% if variables.audio_enabled == True %}
        _ALERT_BEEP_OFF
    {% endif %}
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if m600cfg.prev_temp != 0 %}
        {% set TARGET = m600cfg.prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > printer.configfile.config.extruder.min_extrude_temp|int %} ; If current temp is below target
        {% set TARGET = params.TARGET|int|default(variables.print_default_extruder_temp) %}
    {% endif %}
    {% if cur_temp < (TARGET-5) %}
        {% if variables.status_leds_enabled == True %}
            _STATUS_HEATING
        {% endif %}
        {action_respond_info("Heating nozzle...")}
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    G91 ; Relative positioning
    # Pre-unload to loosen filament
    G1 E5.0 F1200 ; Extrude a bit 
    G1 E3.0 F1600 ; Extrude a bit
    G1 E-13.14 F7000 ; pull hard
    # Unload
    G1 E-{LENGTH} F{variables.fast_speed|int}
    G90 ; Absolute postitioning
    M400
    {% if variables.auto_sensor_off == True %}
        _ENABLE_FS
    {% endif %}
    {action_respond_info("Unload Complete.")}
    {% if variables.status_leds_enabled == True %}
        _STATUS_BUSY
    {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {% set variables = printer["gcode_macro _USER_VARIABLES"] %}
    {% set DELAY = params.DELAY|default(variables.load_delay)|int %}
    {% set SLOW = params.SLOW|default(variables.load_slow)|float %} ; Purge amount
    {% set FAST = params.FAST|default(variables.load_fast)|float %} ; Load length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if m600cfg.prev_temp != 0 %}
        {% set TARGET = m600cfg.prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > printer.configfile.config.extruder.min_extrude_temp|int %} ; If current temp is below target
        {% set TARGET = params.TARGET|int|default(variables.print_default_extruder_temp) %}
    {% else %}
        {% set TARGET = 260 %}
    {% endif %}
    {% if printer.extruder.target < printer.configfile.config.extruder.min_extrude_temp|int %} ; Verify extruder is hot enough
        {% set TARGET = variables.print_default_extruder_temp %} ; Heat up to default temp
    {% else %}
        {% set TARGET = printer.extruder.target %}
    {% endif %}
    {% if cur_temp < (TARGET-5) %}
        {% if variables.status_leds_enabled == True %}
            _STATUS_HEATING
        {% endif %}
        {action_respond_info("Heating nozzle...")}
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if DELAY > 0 %}
        G4 S{DELAY}
    {% endif %}
    {action_respond_info("LOADING...")}
    G91 ; Relative positioning
    G1 E25.0 F{variables.med_speed|int} ; pre-load
    G1 E{FAST} F{variables.fast_speed|int} ; load up to hotend
    G4 P900 ; wait a moment
    G1 E{SLOW} F{variables.slow_speed|int} ; purge to change filament
    G90 ; Absolute postitioning
    M400
    {% if m600cfg.coldstart == True %}
        {action_respond_info("Cooling nozzle...")}
        M109 S0
        SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=coldstart VALUE=False
        {% if variables.auto_sensor_off == True %}
           _DISABLE_FS
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=prev_temp VALUE=0
    SET_IDLE_TIMEOUT TIMEOUT=900 ; Return idle timeout to normal
    {% if variables.audio_enabled == True %}
        _BEEP
    {% endif %}
    {action_respond_info("Load Complete")}
    {% if variables.status_leds_enabled == True %}
        _STATUS_READY
    {% endif %}

# Used to park the toolhead for filament changes
[gcode_macro _FILAMENT_PARK]
description: Park toolhead for filament change
gcode:
    {% set park_lift_z = printer["gcode_macro _USER_VARIABLES"].park_lift_z %}
    
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
        {% set mid_x = max_x / 2.0 %}
    
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}

    {% set z_safe = act_z + park_lift_z %}
    {% if z_safe > max_z %}
        {% set z_safe = max_z %}
    {% endif %}
    ##### end of definitions #####
   
    {% if "xyz" in printer.toolhead.homed_axes %}   
	    SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=prev_temp VALUE={printer.extruder.target}
        {action_respond_info("Parking toolhead...")}

        SAVE_GCODE_STATE NAME=save_state
        G90
        G1 Z{z_safe} F{Sz}
        RESTORE_GCODE_STATE NAME=save_state

	    G0 X{mid_x} Y0 F{St}
    {% else %}
        {action_respond_info("Printer not homed")}
    {% endif %}      

[gcode_macro _TIP_SHAPING]
description: Filament tip shaping sequence
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}

	SAVE_GCODE_STATE NAME=TIP_SHAPING_state
	_LOW_TEMP_CHECK T={TEMP}
    
    {% set old_pressure_advance = printer.extruder.pressure_advance|default(0) %} # old pressure advance
    # we suppress pressure advance
    SET_PRESSURE_ADVANCE ADVANCE=0
    
    {% if filament_sensor_enabled %}
        _DISABLE_FS
    {% endif %}

    
    M82
    G92 E0
    G1 E2 F3600
    G1 E0 F3600
    G1 E3 F3600
    G1 E0 F3600
    G1 E4 F3600
    G1 E0 F3600

    # set last pressure advance
    SET_PRESSURE_ADVANCE ADVANCE={old_pressure_advance}
	RESTORE_GCODE_STATE NAME=TIP_SHAPING_state


[gcode_macro CHECK_FILAMENT]
description: Reports if filament is loaded at toolhead sensor
gcode:
    {% set filament_sensor = printer["gcode_macro _USER_VARIABLES"].filament_sensor_name %}
    QUERY_FILAMENT_SENSOR SENSOR={filament_sensor}

[gcode_macro _DISABLE_FS]
description: Disables filament sensor that might trigger an M600 in the middle of a load/unload/M600
gcode:
    {% set motion_sensor = printer["gcode_macro _USER_VARIABLES"].motion_sensor_name %}
    {% set filament_sensor= printer["gcode_macro _USER_VARIABLES"].filament_sensor_name %}
        
    SET_FILAMENT_SENSOR SENSOR={filament_sensor} ENABLE=0
    G92 E0
    SET_FILAMENT_SENSOR SENSOR={motion_sensor} ENABLE=0
  
[gcode_macro _ENABLE_FS]
description: Enables filament sensor
gcode:
    {% set motion_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].motion_sensor_enabled %}
    {% set filament_sensor = printer["gcode_macro _USER_VARIABLES"].filament_sensor_name %}
   
    SET_FILAMENT_SENSOR SENSOR={filament_sensor} ENABLE=1
    G92 E0
    {% if motion_Sensor_enabled %}
        {% set motion_sensor = printer["gcode_macro _USER_VARIABLES"].motion_sensor_name %}
        SET_FILAMENT_SENSOR SENSOR={motion_sensor} ENABLE=1
    {% endif %}

[delayed_gcode _kill_sensor]
gcode:
    {% if printer["gcode_macro _USER_VARIABLES"].auto_sensor_off == True %}
        _DISABLE_FS
    {% endif %}    
initial_duration: 1 ;keeps filament sensors disabled at startup

[gcode_macro _INSERT_FILAMENT]
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {% set variables = printer["gcode_macro _USER_VARIABLES"] %}}
    {action_respond_info("Filament Detected!")}
    {% if variables.audio_enabled == True %}
        _BEEP
    {% endif %}
    {% if variables.auto_load == True %}
        LOAD_FILAMENT
    {% endif %}

[gcode_macro _FILAMENT_RUNOUT]
description: Procedure when Filament Runout Sensor is triggered
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {% set variables = printer["gcode_macro _USER_VARIABLES"] %}}
    {% if m600cfg.coldstart == False %}
        {action_respond_info("Filament Runout")}
        {% if variables.use_telegram_enabled == True %}
            TELEGRAM_FILAMENT_RUNOUT
        {% endif %}
        SET_IDLE_TIMEOUT TIMEOUT=3600
        {% if variables.audio_enabled == True %}
            _ALERT_BEEP_ON
        {% endif %}
        M600
        {% if m600cfg.cold_start == False %}
            M118 Run UNLOAD_FILAMENT to unload.
            {% if variables.audio_enabled == True %}
                M118 Run _ALERT_BEEP_OFF to silence beeper
            {% endif %}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=prev_temp VALUE={printer.extruder.target}
        SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=runout VALUE=True
        M104 S0
    {% endif %}    
